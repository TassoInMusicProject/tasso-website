#!/usr/bin/perl
# vim: ts=3

use strict;
use Getopt::Long;

my $rep = "rime";

# $COLUMNSPACE is the text which separates each column of parameters.
Getopt::Long::Configure("bundling");
GetOptions (
   'r|repertory=s' => \$rep
);

if ($rep =~ /^\s*$/) {
	$rep = "rime";
}

my $basedir = "../../variorum/data";

`mkdir -p $basedir`;

my $indexdir = "../indexes";

my $manuscriptfile = "$rep-manuscripts.aton";
my $printfile      = "$rep-prints.aton";
my $versefile      = "$rep-verses.aton";
my $settingfile    = "$rep-settings.aton";

my $sourcefile     = "sources.aton";

my %MANUSCRIPTS = getManuscripts("$indexdir/$manuscriptfile");
my %PRINTS      = getPrints("$indexdir/$printfile");
my %SETTINGS    = getSettings("$indexdir/$settingfile");
my %VERSES      = getVerses("$indexdir/$versefile");
my %SOURCES     = getSources("$indexdir/$sourcefile");

my @contents = <>;
for (my $i=0; $i<@contents; $i++) {
	$contents[$i] = cleanForXml($contents[$i]);
}

my %PARAM;

my $i = 0;
my $lasti = $i;
while ($i < @contents) {
	$i = createVariorumXml($i, @contents);
print "PROCESSING FROM LINE $i\n";
	die "Strange error on line $i " if $i < $lasti;
	$lasti = $i;
}


exit 0;

###########################################################################


##############################
##
## createVariorumXml --
##
## 
## @@BEGIN: VARIORUM
## @CATALOGNUM:	Trm1049
## @ID:		E2
## @TYPE:		manuscript
## @SMSIGLUM:	E<sub>2</sub>
## @PAGE:		96r
## @PARATEXT:	stampa
## @VERSE:		
##         queste note son {vive}, e {queste} <del>illegible</del>Amore
##         comincia in novi modi
##         queste note son nodi
##         che mi fa la {mia donna} intorno al core:
##         {Anzi insieme ella et io}
##         {<del>e facciam</del> facciam soavi lacci, e 'l desir mio.}
##         {egli} stringe il piacere, e la speranza.
##         Tal che di libert√† nulla m'avanza.
## @VERSE:		
## @@END: VARIORUM
##

sub createVariorumXml {
	my ($starti, @contents) = @_;
	my $endi = @contents;
	my $foundstart = 0;
	
	my %data;
	my $key;
	my $active = 0;
	my $value;
	for (my $i=$starti; $i<@contents; $i++) {
		my $line = $contents[$i];
		chomp $line;
print "READING FROM LINE $i : $line\n";
		if (!$foundstart) {
			if ($line =~ /^\@\@BEGIN\s*:\s*VARIORUM/) {
				if ($active) {
					die ("Missing a closing tag at line $i: $line\nNext lines:" . $contents[$i+1] . "and: " . $contents[$i+2]);
				}
				$active = 1;
				$foundstart = 1;
				next;
			}
			if ($contents[$i] =~ /^\@BEGIN\s*:\s*VARIORUM/) {
				my $ii = $i + 1;
				die "Error at line $ii: Begin statment is not formatted correctly\n";
			}
		}
		next if !$foundstart;
		if ($line =~ /^\@\@END\s*:\s*VARIORUM/) {
			if (!$active) {
				print STDERR "Warning: Extra ending tag found on line $i\n";
			}
			$active = 0;
			$endi = $i+1;
			last;
		}
		if ($line =~ /^\@END\s*:\s*VARIORUM/) {
			my $ii = $i + 1;
			die "Error at line $ii: End statment is not formatted correctly\n";
		}
		next if $line =~ /^\s*$/;
		if ($line =~ /^\@([^@:\s]+)\s*:\s*(.*)\s*$/) {
			$key = $1;
			$value = $2;
			if ($key !~ /^VERSE$/) {
				$data{$key} .= " $value";
				$data{$key} =~ s/^\s+//;
			} else {
				# add verse line to @VERSES
				$data{$key} .= "\n$line";
				$data{$key} =~ s/^\s+//;
				$data{$key} =~ s/\s+$//;
			}
		} else {
			# add line to current $key
			if ($key !~ /^VERSE$/) {
				$data{$key} .= " $line";
				$data{$key} =~ s/^\s+//;
			} else {
				$data{$key} .= "\n$line";
				$data{$key} =~ s/\s+$//;
			}
		}
	}

	if (!$foundstart) {
		return $endi;
	}

	my $vtest = $data{"VERSE"};
	$vtest =~ s/\@VERSE://g;
	if ($vtest =~ /^\s*$/) {
		print "No verse content for ID $data{'CATALOGNUM'} data is: $data{'DATA'}, so can't write a file.\n";
		print "STARTI $starti ENDI $endi\n";
		return $endi;
	}

	# also need these parameters from index files:
	# DATING:      MANUSCRIPT->DATING
	# SIGLUM:      MANUSCRIPT->SIGLUM (this is the call number of manuscript)
	# DESCRIPTION: MANUSCRIPT->DESCRIPTION
	# MANUSCRIPT->LOCATION: Biblioteca Ambrosiana, Milan, Italy
   #             LOCATION: Biblioteca Vaticana, Vatican City
	# maps to these three parameters:
	#    LIBRARY:      
	#    LIBRARY_CITY:
	#    LIBRARY_COUNTRY:
	# DEDICATION: rempping of PARATEXT

	my %m;
	my @loc;
	if ($data{"TYPE"} =~ /manuscript/i) {
		my $mm = $MANUSCRIPTS{$data{"ID"}};
		if (!$mm) {
			my $cleankey = cleanKey($data{"ID"});
			$mm = $MANUSCRIPTS{$cleankey};
			if (!$mm) {
				print "ERROR Cannot find manuscripts for ID $data{'ID'}\n";
				print join("\n", keys %MANUSCRIPTS), "\n";
			}
		}
		%m = %$mm;
		$data{'DATING'} = $m{'DATING'};
		$data{'CALLNUM'} = $m{'SIGLUM'};
		$data{'DESCRIPTION'} = $m{'DESCRIPTION'};
		@loc = split(/\s*,\s*/, $m{'LOCATION'});
		if (@loc == 2) {
			# MANUSCRIOT->LOCATION: Biblioteca Vaticana, Vatican City
			$data{'LIBRARY'} = $loc[0];
			$data{'LIBRARY_COUNTRY'} = $loc[1];
		} elsif (@loc == 3) {
			# MANUSCRIPT->LOCATION: Biblioteca Ambrosiana, Milan, Italy
			$data{'LIBRARY'} = $loc[0];
			$data{'LIBRARY_CITY'} = $loc[1];
			$data{'LIBRARY_COUNTRY'} = $loc[2];
		}
	}
	$data{'DEDICATION'} = $data{'PARATEXT'};


	# SETTING->PRINCEPSTITLE: PRINCEPSTITLE (title of book containing first edition)
	my %s;
	if ($data{"TYPE"} =~ /music/i) {
		my $sid = $data{"ID"};
		if ($sid !~ /-/) {
			die "Music-based ID must have a dash (followed by part abbreviation): $sid\n";
		}
		$sid =~ s/-.*//;
		if ($data{"PART"} !~ /^\s*$/) {
			$data{"ID"} = "$sid-$data{'PART'}";
			$data{"ID"} =~ s/\s+//g;
		}
		my $ss = $SETTINGS{$sid};
		if (!$ss) {
			print STDERR ("================== Error reading source information for source id $sid\n");
			print STDERR ("================== DATA TYPE $data{'TYPE'}\n");
			print STDERR ("================== DATA ID $data{'ID'}\n");
			return $endi;
		}
		%s = %$ss;
		$data{'PRINCEPSTITLE'} = $s{'PRINCEPSTITLE'};      # title
		$data{'COMPOSER'}      = $s{'COMPOSER'};           # author@role="composer"
		$data{'NORMPUBSHORT'}  = $s{'NORMPUBSHORT'};       # publisher
		$data{'NORMLOC'}       = $s{'NORMLOC'};            # publisher location
		$data{'PRINCEPSYEAR'}  = $s{'PRINCEPSYEAR'};       # publication year
		$data{'PRINCEPSRISM'}  = $s{'PRINCEPSRISM'};       # idno  (RISM number)
	}

	my %p;
	if ($data{"TYPE"} =~ /print/i) {
		my $pid = $data{"ID"};
		print "PID = $pid\n";
		my $pp = $PRINTS{$pid};

		if ($pp =~ /^\s*$/) {
			my $newpid = $pid;
			$newpid =~ s/-//g;
			$pp = $PRINTS{$newpid};
		}

		if ($data{"ID"} =~ /^\d/) {
			# id must start with a letter, using "S":
			$data{"XMLID"} = "S$data{'ID'}";
print STDERR "GOT HERE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n";
print STDERR "GOT HERE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n";
print STDERR "GOT HERE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n";
print STDERR "GOT HERE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n";
		} else {
			$data{"XMLID"} = "$data{'ID'}";
		}


		if ($pp =~ /^\s*$/) {
print STDERR "XPID = $pid\n";
			$pp = $PRINTS{"S$pid"};
print STDERR %PRINTS;
print "\n";
foreach my $item (keys %PRINTS) {
	print "\tKEY = $item\n";
}
print STDERR "GOT HERE BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\n";
print STDERR "GOT HERE BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\n";
print STDERR "GOT HERE BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\n";
print STDERR "GOT HERE BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\n";
		}
		
		if ($pp =~ /^\s*$/) {
			die "Cannot work without print reference >>$pid<<\n";
		} 

		%p = %$pp;
		$data{'PRINTTITLE'}  = $p{'PRINTTITLE'};    # title
		$data{'PUBLISHER'}   = $p{'PUBLISHER'};     # publisher
		$data{'PUBLOCATION'} = $p{'PUBLOCATION'};   # pubPlace
		$data{'PUBYEAR'}     = $p{'PUBYEAR'};       # date
	}

	# VERSEDATA->TITLE: TITLE
	# @TITLE:		Su l'ampia fronte il crespo oro lucente
	my $vv = $VERSES{$data{'CATALOGNUM'}};
	if (!$vv) {
      print %data;
		print "\n";
		die "Cannot find VERSE DATA FOR $data{'CATALOGNUM'}";
	}
	my %v = %$vv;
	$data{'TITLE'} = $v{'TITLE'};

	%PARAM = %data;
	#print "PREPARING XMLDATA FOR:\n";
	#my @keys = keys %data;
	#foreach my $key (@keys) {
	#	print "\t$key\t$data{$key}\n";
	#}
	#print "\n\n";

print "VARIORUM XML FOR $data{'CATALOGNUM'} ID $data{'ID'}\n";
	printVariorumXml($data{'CATALOGNUM'}, $data{'ID'});

	return $endi;
}



##############################
##
## printVaroirumXml -- Print the root element of the XML data.
##

sub printVariorumXml {
	my ($catalognum, $id) = @_;

	$catalognum =~ s/\s+//g;
	if ($catalognum !~ /^T[a-z][a-z]\d+$/) {
		die "Invalid catalog number: $catalognum\n";
	}
	$id =~ s/\s+//g;
	if ($id =~ /^\s*$/) {
		die "Id cannot be empty for $catalognum\n";
	}

	if ($id =~ /^\d/) {
		$id = "S$id";
print STDERR "GOT HERE CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\n";
print STDERR "GOT HERE CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\n";
print STDERR "GOT HERE CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\n";
print STDERR "GOT HERE CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\n";
	}

	`mkdir -p $basedir/$catalognum`;
	my $cleanid = cleanKey($id);
	open (VFILE, ">$basedir/$catalognum/$cleanid.xml") or die "Cannot write file $basedir/$catalognum/$cleanid.xml";

	print VFILE <<"EOT";
<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="tassotei.rng" type="application/xml" schematypens="http://relaxng.orgns/structure/1.0"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
EOT
	printTeiHeader(1);
	printText(1);
	print VFILE "</TEI>\n";

	close VFILE;

}



##############################
##
## printTeiHeader --
## 
## TEI
##   *teiHeader
##

sub printTeiHeader {
	my ($n) = @_;
	indent($n); print VFILE "<teiHeader>\n";
	printFileDesc($n+1);
	indent($n); print VFILE "</teiHeader>\n";
}


##############################
##
## printFileDesc --
##
## TEI
##    teiHeader
##      *fileDesc

sub printFileDesc {
	my ($n) = @_;
	indent($n); print VFILE "<fileDesc>\n";
	printTitleStmt($n+1);
	printPublicationStmt($n+1);
	printSourceDesc($n+1);
	indent($n); print VFILE "</fileDesc>\n";
}



##############################
##
## printSourceDesc --
##
## TEI
##    teiHeader
##       fileDesc
##         *sourceDesc
##

sub printSourceDesc {
	my ($n) = @_;
	indent($n); print VFILE "<sourceDesc>\n";
	my $type = $PARAM{"TYPE"};
	$type =~ s/^\s+//;
	$type =~ s/\s+$//;
	if ($type =~ /manuscript/i) {
		printMsDesc($n+1);
	} elsif ($type =~ /music/i) {
		printMusicDesc($n+1);
	} elsif ($type =~ /print/i) {
		printPrintDesc($n+1);
	} else {
		die "Unknown media type: $type\n";
	}
	indent($n); print VFILE "</sourceDesc>\n";
}



##############################
##
## printPrintDesc --
##
## TEI
##    teiHeader
##       fileDesc
##          sourceDesc
##            *bibl
##

sub printPrintDesc {
	my ($n) = @_;
	my $id = $PARAM{'ID'};
	if ($id =~ /^\d/) {
		$id = "S$id";
print STDERR "GOT HERE DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\n";
print STDERR "GOT HERE DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\n";
print STDERR "GOT HERE DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\n";
print STDERR "GOT HERE DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\n";
	}
	indent($n); print VFILE "<bibl xml:id=\"$id\">\n";
	printPrintBibl($n+1);
	indent($n); print VFILE "</bibl>\n";
}



##############################
##
## printPrintBibl --
## TEI
##    teiHeader
##       fileDesc
##          sourceDesc
##            bibl
##              *title       <= PRINTTITLE
##              *publisher   <= PUBLISHER
##              *pubPlace    <= PUBLOCATION
##              *date        <= PUBYEAR
##              *biblScope   <= PAGE
##

sub printPrintBibl {
	my ($n) = @_;
	indent($n); print VFILE "<title>$PARAM{'PRINTTITLE'}</title>\n";
	indent($n); print VFILE "<publisher>$PARAM{'PUBLISHER'}</publisher>\n";
	indent($n); print VFILE "<pubPlace>$PARAM{'PUBLOCATION'}</pubPlace>\n";
	indent($n); print VFILE "<date when=\"$PARAM{'PUBYEAR'}\">$PARAM{'PUBYEAR'}</date>\n";
	indent($n); print VFILE "<biblScope unit=\"page\">$PARAM{'PAGE'}</biblScope>\n";
}



##############################
##
## printMusicDesc --
##
## TEI
##    teiHeader
##       fileDesc
##          sourceDesc
##            *bibl
##

sub printMusicDesc {
	my ($n) = @_;
	my $id = $PARAM{'ID'};
	if ($id =~ /^\d/) {
		$id = "S$id";
print STDERR "GOT HERE EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\n";
print STDERR "GOT HERE EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\n";
print STDERR "GOT HERE EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\n";
print STDERR "GOT HERE EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\n";
	}
	indent($n); print VFILE "<bibl type=\"music\" xml:id=\"$id\">\n";
	printMusicBibl($n+1);
	indent($n); print VFILE "</bibl>\n";
}



##############################
##
## printMusicBibl --
## TEI
##    teiHeader
##       fileDesc
##          sourceDesc
##            bibl
##              *title       <= PRINCEPSTITLE
##              *author      <= COMPOSER
##              *publisher   <= NORMPUBSHORT
##              *pubPlace    <= NORMLOC
##              *date        <= PRINCEPSYEAR
##              *idno        <= PRINCEPSRISM
##              *biblScope   <= PAGE
##

sub printMusicBibl {
	my ($n) = @_;
	indent($n); print VFILE "<title>$PARAM{'PRINCEPSTITLE'}</title>\n";
	indent($n); print VFILE "<author role=\"composer\">$PARAM{'COMPOSER'}</author>\n";
	indent($n); print VFILE "<publisher>$PARAM{'NORMPUBSHORT'}</publisher>\n";
	indent($n); print VFILE "<pubPlace>$PARAM{'NORMLOC'}</pubPlace>\n";
	indent($n); print VFILE "<date when=\"$PARAM{'PRINCEPSYEAR'}\">$PARAM{'PRINCEPSYEAR'}</date>\n";
	indent($n); print VFILE "<idno type=\"RISM\">$PARAM{'PRINCEPSRISM'}</idno>\n";
	indent($n); print VFILE "<biblScope unit=\"page\">$PARAM{'PAGE'}</biblScope>\n";
}



##############################
##
## printMsDesc --
##
## TEI
##    teiHeader
##       fileDesc
##          sourceDesc
##            *msDesc
##

sub printMsDesc {
	my ($n) = @_;
	my $id = $PARAM{'ID'};
	if ($id =~ /^\d/) {
		$id = "S$id";
print STDERR "GOT HERE FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n";
print STDERR "GOT HERE FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n";
print STDERR "GOT HERE FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n";
print STDERR "GOT HERE FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n";
	}
	indent($n); print VFILE "<msDesc xml:id=\"$id\">\n";
	printMsIdentifier($n+1);
	printMsContents($n+1);
	printHistory($n+1);
	indent($n); print VFILE "</msDesc>\n";
}



##############################
##
## printHistory --
##
## TEI
##    teiHeader
##       fileDesc
##         msDesc
##           *history
##              *origin
##                 *originDate
##

sub printHistory {
	my ($n) = @_;
	my $date = $PARAM{"DATING"};
	if ($date) {
		indent($n);   print VFILE "<history>\n";
		indent($n+1); print VFILE "<origin>\n";
		indent($n+2); print VFILE "<origDate>$date</origDate>\n";
		indent($n+1); print VFILE "</origin>\n";
		indent($n);   print VFILE "</history>\n";
	}
}



##############################
##
## printMsContents --
##
## TEI
##    teiHeader
##       fileDesc
##          sourceDesc
##             msDesc
##               *msContents
##

sub printMsContents {
	my ($n) = @_;
	my $folio = $PARAM{"PAGE"};  # used to be FOLIO but made similar to music
	my $description = $PARAM{"DESCRIPTION"};
	indent($n); print VFILE "<msContents>\n";
	indent($n+1); print VFILE "<msItem>\n";
	if ($folio) {
		if ($folio !~ /^f\./i) {
			$folio = "f. $folio";
		}
		indent($n+2); print VFILE "<locus>$folio</locus>\n";
	}
	if ($description) {
		indent($n+2); print VFILE "<p>$description</p>\n";
	}
	indent($n+1); print VFILE "</msItem>\n";
	indent($n); print VFILE "</msContents>\n";
}



##############################
##
## printMsIdentifier --
## TEI
##   teiHeader
##      fileDesc
##         sourceDesc
##            msDesc
##              *msIdentifier
##                 *region
##                 *settlement
##                 *repository
##

sub printMsIdentifier {
	my ($n) = @_;
	my $library  = $PARAM{"LIBRARY"};
	my $city     = $PARAM{"LIBRARY_CITY"};
	my $country  = $PARAM{"LIBRARY_COUNTRY"};
	my $callnum  = $PARAM{"CALLNUM"};
	indent($n); print VFILE "<msIdentifier>\n";
	if ($country) {
		indent($n+1); print VFILE "<region>$country</region>\n";
	}
	if ($city) {
		indent($n+1); print VFILE "<settlement>$city</settlement>\n";
	}
	if ($library) {
		indent($n+1); print VFILE "<repository>$library</repository>\n";
	}
	if ($callnum) {
		indent($n+1); print VFILE "<idno>$callnum</idno>\n";
	}
	
	indent($n); print VFILE "</msIdentifier>\n";
}




##############################
##
## printPublicationStmt --
## TEI
##   teiHeader
##      fileDesc
##         titleStmt
##        *publicationStmt
##

sub printPublicationStmt {
	my ($n) = @_;
	indent($n); print VFILE "<publicationStmt>\n";
	indent($n+1); print VFILE "<publisher></publisher>\n";
	indent($n+1); print VFILE "<availability status=\"\"></availability>\n";
	if ($PARAM{'TYPE'} =~ /music/i) {
		my $pid;
		my $voice;
		die "Error in $PARAM{'ID'}\n" if $PARAM{"ID"} !~ /(T[a-z][a-z]\d+[a-z])-(.*)/;
		$pid = $1;
		$voice = $2;
		indent($n); print VFILE "<idno type=\"local\">$pid</idno>\n";
		indent($n); print VFILE "<idno type=\"label\">$pid ($voice)</idno>\n";
	} elsif ($PARAM{'TYPE'} =~ /print/i) {
		my $sprint = $PARAM{"ID"};
		# $sprint =~ s/^S//;
		if ($sprint =~ /^\d/) {
			$sprint = "S$sprint";
print STDERR "GOT HERE GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\n";
print STDERR "GOT HERE GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\n";
print STDERR "GOT HERE GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\n";
print STDERR "GOT HERE GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\n";
		}
		indent($n+1); print VFILE "<idno type=\"local\">$sprint</idno>\n";
	} else {
		my $idno = $PARAM{"SMSIGLUM"};
		if ($idno) {
			indent($n+1); print VFILE "<idno type=\"local\">$PARAM{'ID'}</idno>\n";
		}
	}
	indent($n); print VFILE "</publicationStmt>\n";
}



##############################
##
## printTitleStmt --
## TEI
##   teiHeader
##     *fileDesc
##

sub printTitleStmt {
	my ($n) = @_;
	indent($n); print VFILE "<titleStmt>\n";
	indent($n+1);
	print VFILE "<title>";
print "TITLE : $PARAM{'TITLE'}\n";
	print VFILE $PARAM{'TITLE'};
	print VFILE "</title>\n";
	indent($n); print VFILE "</titleStmt>\n";
}



##############################
##
## printText --
## TEI
##    text
##

sub printText {
	my ($n) = @_;
	indent($n); print VFILE "<text>\n";
	printBody($n+1);
	indent($n); print VFILE "</text>\n";
}



##############################
##
## printBody --
## TEI
##    text
##       body
##

sub printBody {
	my ($n) = @_;
	indent($n); print VFILE "<body xml:space=\"preserve\">\n";
	printDivDedication($n+1);
	printDivLg($n+1);
	indent($n); print VFILE "</body>\n";
}



##############################
##
## printDivDedication --
## TEI
##    text
##       body
##          *div type="dedication"
##

sub printDivDedication {
	my ($n) = @_;
	my $dedication = $PARAM{"DEDICATION"};
	indent($n);   print VFILE "<div type=\"dedication\">\n";
	indent($n+1); print VFILE "<p xml:id=\"p1\">$dedication</p>\n";
	indent($n);   print VFILE "</div>\n";
}



##############################
##
## printDivLg -- print verses (only one refrain processed correctly for now)
##
## TEI
##    text
##       body
##           div type="dedication"
##          *div
##             *lg
##

my $LINENUM = -1;

sub printDivLg {
	my ($n) = @_;
	$LINENUM = 1;
	indent($n);   print VFILE "<div>\n";
	# indent($n+1);   print VFILE "<lg>\n";
	printVersesX($n+1);
	# indent($n+1);   print VFILE "</lg>\n";
	indent($n);   print VFILE "</div>\n";
}



##############################
##
## printVersesX --
##

sub printVersesX {
	my ($n) = @_;
	my @verses = getVersesX($PARAM{"VERSE"});
	for (my $i=0; $i<@verses; $i++) {
		indent($n);   print VFILE "<lg>\n";
		printVerse($n+1, $verses[$i]);
		indent($n);   print VFILE "</lg>\n";
	}
}



##############################
##
## printVerse --
##

sub printVerse {
	my ($n, $text) = @_;
	my @lines = split(/^/m, $text);
	for (my $i = 0; $i<@lines; $i++) {
		indent($n);
		print VFILE "<l xml:id=\"l$LINENUM\">";
		printLineWithSegments($lines[$i], $LINENUM);
		$LINENUM++;
		print VFILE "</l>\n";
	}
}


##############################
##
## printLineWithSegments --
##

sub printLineWithSegments {
	my ($line, $lineid) = @_;
	chomp $line;
	my $variant = 1;
	$line =~ s/\}/<\/seg>/g;
	$line =~ s/\{/<seg xml:id=\"XXXXX\">/g;
	while ($line =~ /XXXXX/) {
		$line =~ s/(XXXXX)/l${lineid}v$variant/;
		$variant++;
	}
	print VFILE $line;
}



##############################
##
## getParameters --
##

sub getParameters {
	my @contents = @_;
	my %output;
	my $key;
	my $value;

	for (my $i=0; $i<@contents; $i++) {
		my $line = $contents[$i];
		chomp $line;
		if ($line =~ /^\@\@BEGIN\s*:\s*/) {
			$key = "";
			next;
		}
		if ($line =~ /^\@\@END\s*:\s*/) {
			$key = "";
			next;
		}
		if ($line =~ /^\@([^:]+)\s*:\s*(.*)\s*$/) {
			$key = $1;
			$value = $2;
			# overwriting if duplicate (maybe print a warning)
			$output{$key} = $value;
			next;
		} elsif ($key eq "") {
			# ignore this line as there is no associated key for an extended value.
			next;
		}
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		$output{$key} .= " $line";
		$output{$key} =~ s/\s+$//;
		$output{$key} =~ s/^\s+//;
	}
	return %output;
}



##############################
##
## getVersesX --  
##

sub getVersesX {
	my ($contents) = @_;
	my @output;
	my @lines = split(/\n/, $contents);
	my $counter = -1;
	for (my $i=0; $i<@lines; $i++) {
		my $line = $lines[$i];
		chomp $line;
		if ($line =~ /^\@VERSE\s*:\s*$/) {
			$counter++;
		} elsif ($line =~ /^\@VERSE\s*:\s*(.*)\s*$/) {
			$counter++;
			my $newline = $1;
			$newline =~ s/^\s+//;
			$newline =~ s/\s+$//;
			if ($newline !~ /^\s*$/)  {
				$output[$counter] .= "\n$newline";
				$output[$counter] =~ s/^\n//;
			}
		} elsif ($counter >= 0) {
			$line =~ s/^\s+//;
			$line =~ s/\s+$//;
			if ($line !~ /^\s*$/)  {
				$output[$counter] .= "\n$line";
				$output[$counter] =~ s/^\n//;
			}
		}
	}

	return @output;
}




##############################
##
## indent -- Print indentation tabs.
##

sub indent {
	my ($n) = @_;
	for (my $i=0; $i<$n; $i++) {
		print VFILE "\t";
	}
}






########################################################################3
##
## Index loading functions
##


###############################
##
## getManuscripts -- Create a lookup index of all manuscripts.
##
## @@BEGIN: MANUSCRIPT
## @SMSIGLUM: A<sub>1</sub>
## @SIGLUM: R.96 sup.
## @LOCATION: Biblioteca Ambrosiana, Milan, Italy
## @DATING: 16th century
## @DESCRIPTION: miscellaneous codex, containing copies of 6 lyric poems by Tasso
## @@END: MANUSCRIPT
## 

sub getManuscripts {
	my ($manuscriptfile) = @_;
	return getAtonEntries($manuscriptfile, "MANUSCRIPT", "SMSIGLUM");
}



###############################
##
## getPrints -- Create a lookup index of all prints.
##
## @@BEGIN:	PRINT
## @SPRINTNUM:	3
## @PRINTTITLE:	De le rime di diversi nobili poeti toscani, raccolte da M. Dionigi Atanagi. Libro Primo
## @PUBLISHER:	Lodovico Avanzo
## @PUBLOCATION:	Venice
## @PUBYEAR:	1565
## @@END:		PRINT
## 

sub getPrints {
	my ($printfile) = @_;
	return getAtonEntries($printfile, "PRINT", "SPRINTNUM");
}



###############################
##
## getSettings -- Create a lookup index of all settings.
## 
## @@BEGIN:	SETTING
## @CATALOGNUM:	Trm0288l
## @RIMETITLE:	Amatemi, ben mio
## @SOLERTI:	288
## @COMPOSER:	Aagesen, Truid
## @PRINCEPSTITLE:	Cantiones trium vocum
## @PRINCEPSLOC:	Hamburg
## @NORMLOC:	Hamburg
## @NORMPUB:	von Ohr-Jauch
## @NORMPUBSHORT:	von Ohr-Jauch
## @PRINCEPSPUB:	von Ohr-Jauch
## @PRINCEPSYEAR:	1608
## @PRINCEPSRISM:	S 3549
## @REPRINTS:	
## @OVOICES:	3
## @EXTANTVOICES:	3
## @OCLEFS:	C3,C4,F4
## @OMENSURATION:	C
## @OKEYSIG:	
## @TIMPEDITOR:	Ricciardi, Emiliano
## @NOTE:		
## @@END:		SETTING
## 

sub getSettings {
	my ($settingfile) = @_;
	return getAtonEntries($settingfile, "SETTING", "CATALOGNUM");
}



###############################
##
## getVerses -- Create a lookup index of all verses (rime).
## 
## @@BEGIN:	VERSEDATA
## @SOLERTI:	33
## @CATALOGNUM:	Trm0033
## @TITLE:		Io veggio in cielo scintillar le stelle
## @GENRE:		sonetto
## @MANUSRC:	Brn, C, Ts<sub>2</sub>, V<sub>8</sub>
## @PRINTSRC:	11, 12, 13, 22a), 26, 31, 35, 69, 85, 87, 141, 166, 169
## @@BEGIN:	VERSES
## @ABOUTIT:	Camminando di notte prega le stelle che guidino il suo corso.
## @ABOUTEN:	Wandering at night he begs the starts to guide his course.
## @EDITOR:	Solerti, Angelo
## @EDITION_TITLE: Le Rime di Torquato Tasso
## @EDITION_LOC:	Bologna
## @EDITION_PUB:	Romagnoli-Dall‚ÄôAcqua
## @EDITION_DATE:  1898-1902
## @EDITION_VOL:	2
## @EDITION_PAGE:  49-50
## @TRANSLATOR:	Emiliano Ricciardi and Amyrose McCue Gill
## @VERSE:
## 	Io veggio in cielo scintillar le stelle
## 	Oltre l'usato e lampeggiar tremanti,
## 	Come ne gli occhi de' cortesi amanti
## 	Noi rimiriam talor vive facelle.
## @VERSE:
## 	Aman forse l&agrave; suso, o pur son elle
## 	Pietose a' nostri affanni, a' nostri pianti?
## 	Mentre scorgon le insidie e i passi erranti
## 	L&agrave; dove altri d'Amor goda e favelle?
## @VERSE:
## 	Cortesi luci, se Leandro in mare
## 	O trav&iuml;ato peregrin foss'io
## 	Non mi sareste di soccorso avare:
## @VERSE:
## 	Cos&igrave; vi faccia il Sol pi&ugrave; belle e chiare,
## 	Siate nel dubbio corso al desir mio
## 	Fide mie duci e scorte amate e care.
## @TVERSE:
## 	I see, in the sky, the stars twinkling 
## 	More than usual, and ablaze, trembling,
## 	As in the eyes of gracious lovers
## 	We see at times reflected lively lights.
## @TVERSE:
## 	Perhaps they are in love up there, or are they even
## 	Sympathetic to our troubles, to our tears?
## 	While they espy the dangers and the errant steps,
## 	There, where others take pleasure in and tell tales of Love?
## @TVERSE:
## 	Gracious lights, if Leander in the sea
## 	Or straying pilgrim were I,
## 	You would not be so stingy with your aid:
## @TVERSE:
## 	Thus may the Sun make you more beautiful and bright;
## 	May you be, upon the uncertain course towards my desire,
## 	My faithful guides and beloved and dear guards.
## @@END:		VERSES
## @NEW_CRIT_ED:   Torquato Tasso, <i>Rime d‚Äôamore (secondo il codice
## 		Chigiano L VIII 302)</i>, eds. Franco Gavazzeni and
## 		Vercingetorige Martignone, vol. 4 of <i>Edizione
## 		Nazionale delle opere di Torquato Tasso</i>
##		(Alessandria: Edizioni Dell‚ÄôOrso, 2004), 25.
## @ATTRIBUTION_ABOUT:	Secure
##		<br>
##		Among other authoritative sources (see Literary
##		Sources), this poem appears in the autograph Chigiano
##		L.VIII.302 (Biblioteca Vaticana, Rome), compiled
##		around 1584&ndash;85.
## @DATING:	
## @DEDICATEE:	Bendidio, Lucrezia 
## @COMMENTARY:    
## @@END:		VERSEDATA
##

sub getVerses {
	my ($versefile) = @_;
	return getAtonEntries($versefile, "VERSEDATA", "CATALOGNUM");
}



###############################
##
## getSources -- Create a lookup index of all sources.
## 
## @@BEGIN: SOURCE
## @RISM:	1588-20
## @AUTHOR:	Acelli, Cesare; Croce, Giovanni; Giovannelli, Ruggiero; Guami, Francesco; Guami, Giuseppe; Stivori, Francesco
## @TITLEPAGE:	FIORI MVSICALI / DI DIVERSI /AVTTORI A TRE VOCI. / <i>LIBRO SECONDO.</i> / <i>Nuouamente composti, & dati in luce.</i> / CON PRIVILEGIO: / <i>In Venetia Appresso Giacomo Vincenzi.</i> / MDLXXXVIII.
## @TITLESHORT:	Fiori musicali, libro secondo
## @PUBLISHER:	Vincenzi
## @YEAR:	1588
## @PUBTYPE:	anthology
## @PUBFORMAT:	part-books
## @PUBLOC:	Venetia
## @PUBNORMLOC:	Venice
## @SRCDEDICATEE:	Francesco Sugana
## @OPARTBOOKS:	CTB
## @EXTPARTBOOKS:	CTB
## @EXTNAMES:	CTB
## @SRCLOCSIGLA:	A-Wn
## @REPRODUCTIONTYPE:	microfilm
## @SRCURL:	
## @@END: SOURCE
## 

sub getSources {
	my ($sourcefile) = @_;
	return getAtonEntries($sourcefile, "SOURCE", "RISM");
}



##############################
##
## cleanKey --
##

sub cleanKey {
	my ($key) = @_;
	$key =~ s/<.*?>//g;
	$key =~ s/\///g;
	$key =~ s/[^a-zA-Z0-9_-]//g;
	if ($key =~ /^\d/) {
		print "WARNING: KEY STARTS WITH DIGIT: $key, ADDING AN S BEFORE\n";
		$key = "S$key";
	}
	return $key;
}



##############################
##
## cleanForXml --
##

sub cleanForXml {
	my ($text) = @_;
	return $text if $text !~ /\&/;
	$text =~ s/\&ndash;/\&#x2013;/g;
	$text =~ s/ \& / \&amp; /g;
	$text =~ s/\& /\&amp; /g;
	# Trm0126.aton:Lei sol vagheggio, &, se pur l‚Äôaltre io miro,
	# Trm0246.aton:Di le ch‚Äôam‚Äô&adoro
	$text =~ s/\&, /&amp;, /g;
	$text =~ s/\&adoro/&amp;adoro/g;
	$text =~ s/\&c\./&amp;c./g;
	$text =~ s/\&aacute;/√°/g;
	$text =~ s/\&eacute;/√©/g;
	$text =~ s/\&iacute;/√≠/g;
	$text =~ s/\&oacute;/√≥/g;
	$text =~ s/\&uacute;/√∫/g;
	$text =~ s/\&agrave;/√†/g;
	$text =~ s/\&egrave;/√®/g;
	$text =~ s/\&igrave;/√¨/g;
	$text =~ s/\&ograve;/√≤/g;
	$text =~ s/\&ugrave;/√π/g;
	$text =~ s/\&auml;/√§/g;
	$text =~ s/\&euml;/√´/g;
	$text =~ s/\&iuml;/√Ø/g;
	$text =~ s/\&ouml;/√∂/g;
	$text =~ s/\&uuml;/√º/g;
	$text =~ s/\&Aacute;/√Å/g;
	$text =~ s/\&Eacute;/√â/g;
	$text =~ s/\&Iacute;/√ç/g;
	$text =~ s/\&Oacute;/√ì/g;
	$text =~ s/\&Uacute;/√ö/g;
	$text =~ s/\&Agrave;/√Ä/g;
	$text =~ s/\&Egrave;/√à/g;
	$text =~ s/\&Igrave;/√å/g;
	$text =~ s/\&Ograve;/√í/g;
	$text =~ s/\&Ugrave;/√ô/g;
	$text =~ s/\&Auml;/√Ñ/g;
	$text =~ s/\&Euml;/√ã/g;
	$text =~ s/\&Iuml;/√è/g;
	$text =~ s/\&Ouml;/√ñ/g;
	$text =~ s/\&Uuml;/√ú/g;
	return $text;
}



##############################
##
## getAtonEntries --
##

sub getAtonEntries {
	my ($datafile, $ATONTAG, $IDTAG) = @_;
print STDERR "GETTING ID ATONTAG $ATONTAG FOR IDTAG $IDTAG in file $datafile\n";
	my %output;
	open (DFILE, $datafile) or die "Cannot read manuscripts from $datafile\n";
	my @contents = <DFILE>;
	for (my $i=0; $i<@contents; $i++) {
		$contents[$i] = cleanForXml($contents[$i]);
	}
	close DFILE;
	my $index = 0;
	my $key;
	my $hentry;
	my %entry;
	while (($index >= 0) && ($index < @contents)) {
		($index, $hentry) = getAtonEntry($ATONTAG, $index, @contents);
		if ($index > 0) {
			# %entry = %$hentry;
			#$key = $$hentry{$IDTAG};
			$key = cleanKey($$hentry{$IDTAG});
print ">>>>>>>>>>>>>>>>>>>>>>>>>>>>  CLEAN KEY IS SET TO $key\n";
			if ($key !~ /^\s*$/) {
				# ignore entries with no ID (possible in sources.aton)
				if ($output{$key} ne "") {
					print "CURRENT VALUE: $output{$key}\n";
					die "Duplicate key >>$key<< in list";
				}
				$output{$key} = $hentry;
			}
		}
	}
	return %output;
}



##############################
##
## getAtonEntry --
##

sub getAtonEntry {
	my ($KEY, $index, @contents) = @_;
	my $start = -1;
	for (my $i=$index; $i<@contents; $i++) {
		if ($contents[$i] =~ /\@\@BEGIN\s*:\s*$KEY\s*$/) {
			$start = $i+1;
			last;
		}
	}
	if ($start < 0) {
		# return -1 if there is no more data.
		return (-1, "", 0);
	}
	my %entry;
	my $key;
	my $returnid;
	my $outindex = -1;
	my $value;
	for (my $i=$start; $i<@contents; $i++) {
		my $line = $contents[$i];
		chomp $line;
		if ($line =~ /^\@\@END\s*:\s*$KEY\s*$/) {
			$outindex = $i;
			last;
		} elsif ($line =~ /^\@([^:\@]+)\s*:\s*(.*)\s*$/) {
			$key = $1;
			$value = $2;
print "KEY = $key\tVALUE = $value\n";
			if (($key eq "VERSE") || ($key eq "TVERSE")) {
				$entry{"VERSE_COUNT"}++;
				$entry{$key} .= "\n$value";
				$entry{$key} =~ s/^\s*//;
				$entry{$key} =~ s/\s*$//;
			} else {
				$entry{$key} .= " $value";
				$entry{$key} =~ s/^\s*//;
				$entry{$key} =~ s/\s*$//;
			}
		} elsif ($line !~ /^\@/) {
			if (($key eq "VERSE") || ($key eq "TVERSE")) {
				$entry{$key} .= "\n$value";
				$entry{$key} =~ s/^\s*//;
				$entry{$key} =~ s/\s*$//;
			} elsif ($key ne "") {
				$value = "$entry{$key} $line";
				$value =~ s/\s*$//;
				$value =~ s/^\s*//;
				$entry{$key} = $value;
			}
		}
	}
	return ($outindex, \%entry);
}

