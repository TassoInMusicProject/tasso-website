#!/usr/bin/perl
# vim: ts=3

use strict;

my $scoredir = "../../../tasso-scores";
my @files = glob("$scoredir/*/kern/*.krn");

my @rimefiles;
my @nonrimefiles;
my @ABBRS;

for (my $i=0; $i<@files; $i++) {
	if ($files[$i] =~ /Trm\d{4}[a-z]+-/) {
		push(@rimefiles, $files[$i]);
	} else {
		push(@nonrimefiles, $files[$i]);
	}
}

my $width = 425;

my $file;
foreach $file (@rimefiles) {
	processFile($file);
}

foreach $file (@nonrimefiles) {
	processFile($file);
}


###########################################################################



##############################
##
## processFile --
##

sub processFile {
	my ($file) = @_;
	open (FILE, $file) or die "Cannot read $file\n";
	my @contents = <FILE>;
	chomp @contents;
	close FILE;
	my $composer = "";
	my $title = "";
	my $final = "";
	my $publicationdate = "";
	my $rime = "";
	my $id = $file;
	$id =~ s/.*\///;
	$id =~ s/-.*//;
	my %parameters = getParameters($id);
	my @names = getPartNames(%parameters);
	my @abbrs = getPartAbbreviations(%parameters);
	@ABBRS = @abbrs;
	my @scores = getPartScores(%parameters);
	my $score = $parameters{"MELISMASCORE"};
	foreach my $line (@contents) {
		if ($line =~ /^\!\!\!COM:\s*(.*)\s*/) {
			$composer = $1;
		}
		if ($line =~ /^\!\!\!OTL:\s*(.*)\s*/) {
			$title = $1;
		}
		if ($line =~ /^\!\!\!rime:\s*(.*)\s*/) {
			$rime = "(rime $1)";
		}
		if ($line =~ /^\!\!\!PDT:\s*(.*)\s*/) {
			$publicationdate = $1;
		}
		if ($line =~ /^\!\!\!final:\s*(.*)\s*/) {
			$final = $1;
		}
	}

	my $wordlist = getWordlist($id);
	if ($wordlist =~ /^\s*$/) {
		$wordlist = "<i>no melismas</i>";
	}

	my $base = $file;
	$base =~ s/.*\///;
	$base =~ s/\.krn$//;

	my $pscores = "";
	for (my $i=@scores - 1; $i>=0; $i--) {
		$pscores .= ", $abbrs[$i]: $scores[$i]";
	}

	print << "EOT";

<div class="sortable">
<a name="$id"></a>
<table class="entry">

<tr>
	<td colspan="3" class="id">
		$id
	</td>
</tr>

<tr>
	<td class="blank">
	</td>
	<td>
		<b>Composer:</b>
	</td>
	<td class="composer">
		$composer / <span class="date">$publicationdate</span>
	</td>
</tr>

<tr>
	<td class="blank">
	</td>
	<td>
		<b>Title:</b>
	</td>
	<td>
		<i>$title</i> $rime
	</td>
</tr>

<tr>
	<td class="blank">
	</td>
	<td>
		<b>Score:</b>
	</td>
	<td class="score">
		$score of notes are in a melisma$pscores
	</td>
</tr>

<tr>
	<td class="blank">
	</td>
	<td>
		<b>View:</b>
	</td>
	<td>
		<a target="_blank" href="/work?id=$id&filter=melisma">2+ notes</a>,
		<a target="_blank" href="/work?id=$id&filter=melisma%20-m3">3+ notes</a>,
		<a target="_blank" href="/work?id=$id&filter=melisma%20-m4">4+ notes</a>,
		<a target="_blank" href="/work?id=$id&filter=melisma%20-m5">5+ notes</a>
	</td>
</tr>

<tr>
	<td class="blank">
	</td>
	<td>
		<b>Words:</b>
	</td>
	<td>
	$wordlist
	</td>
</tr>

</table>
</div>

EOT

}



##############################
##
## getPartScores --
##

sub getPartScores {
	my %parameters = @_;
	my $count = $parameters{"PARTCOUNT"};
	my @output;
	for (my $i=1; $i<=$count; $i++) {
		$output[@output] = $parameters{"PARTSCORE-$i"};
	}
	return @output;
}



##############################
##
## getPartNames --
##

sub getPartNames {
	my %parameters = @_;
	my $count = $parameters{"PARTCOUNT"};
	my @output;
	for (my $i=1; $i<=$count; $i++) {
		$output[@output] = $parameters{"PARTNAME-$i"};
	}
	return @output;
}



##############################
##
## getPartAbbreviations --
##

sub getPartAbbreviations {
	my %parameters = @_;
	my $count = $parameters{"PARTCOUNT"};
	my @output;
	for (my $i=1; $i<=$count; $i++) {
		$output[@output] = $parameters{"PARTABBR-$i"};
	}
	return @output;
}



##############################
##
## getWordlist --
##

sub getWordlist {
	my ($id) = @_;
	my $filename = "data/$id.aton";
	open (FILE, $filename) or return "ERROR";
	# open (FILE, $filename) or die "Cannot read data for $filename\n";
	my @contents = <FILE>;
	close FILE;
	chomp @contents;
	my $output;
	my @parts;
	my %params;
	my $word;
	my $counter = 0;

	for (my $i=0; $i<@contents; $i++) {
		my $line = $contents[$i];
		next if $line !~ /^\@\@BEGIN:\s*WORD\s*$/;
		%params = getWordParams($i, @contents);
		$word = getWord($i, @contents);
		$counter++;
		$parts[$params{"PARTNUM"} - 1] .= "$word, ";
	}

	my $output = "";
	$output .= "<table>\n";
	
	for (my $i=@parts - 1; $i>=0; $i--) {
		$output .= "\t<tr>";

		$output .= "<td>";
		$output .= "$ABBRS[$i]:";
		$output .= "</td>";

		$output .= "<td>";
		$parts[$i] =~ s/, $//;
		my $value = $parts[$i];
		if ($value =~ /^\s*$/) {
			$value = "<i>no melismas</i>";
		}
		$output .= $value;
		$output .= "</td>";

		$output .= "</tr>\t";

	}
	$output .= "</table>\n";

	if ($counter == 0) {
		return "";
	}
	return "$output";
}



##############################
##
## getMelismaScore --
##

sub getParameters {
	my ($id) = @_;
	my $filename = "data/$id.aton";
	open (TFILE, $filename) or return "0%";
	my @contents = <TFILE>;
	close TFILE;
	chomp @contents;

	my %output;
	for (my $i=0; $i<@contents; $i++) {
		my $line = $contents[$i];
		chomp $line;
		if ($line =~ /^\@\@BEGIN\s*:\s*WORD\s*$/) {
			last;
		}
		if ($line =~ /^\@([^ :]+)\s*:\s*(.*)\s*$/) {
			$output{$1} = $2;
		}
	}

	return %output;
}



##############################
##
## getWordParams --
##

sub getWordParams {
	my ($index, @contents) = @_;
	my %params;
	my $output = "";
	my $i;
	for ($i = $index+1; $i<@contents; $i++) {
		my $line = $contents[$i];
		last if $line =~ /^\@\@END:\s*WORD\s*$/;
		if ($line =~ /^\@([^ :]+):\s*(.*)\s*$/) {
			$params{$1} = $2;
		}
	}
	return %params;
}



##############################
##
## getWord --
##

sub getWord {
	my ($index, @contents) = @_;
	my %params;
	my $output = "";
	my $i;
	for ($i = $index+1; $i<@contents; $i++) {
		my $line = $contents[$i];
		last if $line =~ /^\@\@END:\s*WORD\s*$/;
		if ($line =~ /^\@([^ :]+):\s*(.*)\s*$/) {
			$params{$1} = $2;
		}
	}
	my @syllables = split(/\s+/, $params{"SYLLABLES"});
	my @barlines = split(/\s+/, $params{"BARLINES"});
	my @notecounts = split(/\s+/, $params{"NOTECOUNTS"});
	for ($i=0; $i<@syllables; $i++) {
		my $count = $notecounts[$i];
		my $syllable = $syllables[$i];
		if ($count > 10) {
			$output .= "<span title='$count notes starting in m. $barlines[$i]' class='ten'>$syllable</span>";
			next;
		}
		if ($count == 1) {
			$output .= "<span title='m. $barlines[$i]' class='one'>$syllable</span>";
			next;
		}
		if ($count == 2) {
			$output .= "<span title='$count notes starting in m. $barlines[$i]' class='two'>$syllable</span>";
			next;
		}
		if ($count == 3) {
			$output .= "<span title='$count notes starting in m. $barlines[$i]' class='three'>$syllable</span>";
			next;
		}
		if ($count == 4) {
			$output .= "<span title='$count notes starting in m. $barlines[$i]' class='four'>$syllable</span>";
			next;
		}
		if ($count <= 10) {
			my $v = $barlines[$i];
			$v =~ s/'//;
			$output .= "<span title='$count notes starting in m. $v' class='five'>$syllable</span>";
		}
	}
	return $output;
}




