#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Tue Oct  9 16:33:40 PDT 2018
# Last Modified: Sat Oct 13 09:27:21 PDT 2018
# Filename:      createvariorumatons
# Syntax:        perl 5
# vim: ts=3
#
# Description:   Create an empty variorum file for rimes.  Do not overwrite
#                any existing files.
#


use strict;

my %NAMES;
$NAMES{"C"}    = "Canto";           # 250
$NAMES{"C1"}   = "Canto_1";         # 5
$NAMES{"C2"}   = "Canto_2";         # 5
$NAMES{"A"}    = "Alto";            # 236
$NAMES{"A1"}   = "Alto_1";          # 1
$NAMES{"A2"}   = "Alto_2";          # 1
$NAMES{"T"}    = "Tenore";          # 262
$NAMES{"T1"}   = "Tenore_1";        # 3
$NAMES{"T2"}   = "Tenore_2";        # 3
$NAMES{"B"}    = "Basso";           # 261
$NAMES{"B1"}   = "Basso_1";         # 1
$NAMES{"B2"}   = "Basso_2";         # 1
$NAMES{"V"}    = "Quinto";          # 218
$NAMES{"VI"}   = "Sesto";           # 38
$NAMES{"VII"}  = "Settimo";         # 3
$NAMES{"VIII"} = "Ottavo";          # 2
$NAMES{"IX"}   = "Nono";            # 1
$NAMES{"X"}    = "Decimo";          # 1
$NAMES{"XI"}   = "Undicesimo";      # 1
$NAMES{"XII"}  = "Dodicesimo";      # 1
$NAMES{"Bc"}   = "Basso_continuo";  # 17

my $indexdir = "../indexes";
my $sourcefile     = "sources.aton";
#my $manuscriptfile = "rime-manuscripts.aton";
#my $printfile      = "rime-prints.aton";
#my $versefile      = "rime-verses.aton";
#my $settingfile    = "rime-settings.aton";

#my $manuscriptfile = "aminta-manuscripts.aton";
#my $printfile      = "aminta-prints.aton";
#my $versefile      = "aminta-verses.aton";
#my $settingfile    = "aminta-settings.aton";

#my $manuscriptfile = "gerusalemme-manuscripts.aton";
#my $printfile      = "gerusalemme-prints.aton";
#my $versefile      = "gerusalemme-verses.aton";
#my $settingfile    = "gerusalemme-settings.aton";

my $manuscriptfile = "other-manuscripts.aton";
my $printfile      = "other-prints.aton";
my $versefile      = "other-verses.aton";
my $settingfile    = "other-settings.aton";

my %MANUSCRIPTS = getManuscripts("$indexdir/$manuscriptfile");
my %PRINTS      = getPrints("$indexdir/$printfile");
my %SETTINGS    = getSettings("$indexdir/$settingfile");
my %VERSES      = getVerses("$indexdir/$versefile");
my %SOURCES     = getSources("$indexdir/$sourcefile");

my @catkeys = sort keys %VERSES;
my $counter = 0;

foreach my $catkey (@catkeys) {
	createVariorumFile($catkey);
	$counter++;
	# last if $counter == 2;
}


exit 0;



##############################
##
## createVariorumFile --
##

sub createVariorumFile {
	my ($catalognum) = @_;

	my $filename = "$catalognum.aton";
	if (-r $filename) {
		# print "$filename already exists.  Not overwriting...\n";
		return;
	} else {
		print "Creating $filename ...\n";
	}

	open(VFILE, ">$filename") or die "Cannot write $filename\n";

	### MANUSCRIPTS ###
	# get a list of the manuscripts for the catalog number
	# @MANUSRC:	Amz, Ber, Brn, C, Mi, Ts<sub>1</sub>, V<sub>8</sub>, V<sub>13/TS1</sub>

	my $vv = $VERSES{$catalognum};
	my %v = %$vv;
	my $script = $v{"MANUSRC"};
	my @manuscripts = split(/\s*,\s*/, $script);
	my @manids;
	for (my $i=0; $i<@manuscripts; $i++) {
		$manids[$i] = cleanKey($manuscripts[$i]);
		#print "\tManuscript: $manids[$i]\n";
		createAtonTemplate($catalognum, $manids[$i], "manuscript");
	}


	### PRINT       ###
	# get a list of the prints for the catalog number
	# @PRINTSRC:	3, 4, 8, 9, 11, 12, 13, 15, 20, 24, 29, 33, 67, 85, 87, 141, 166, 169
	my $prn = $v{"PRINTSRC"};
	my @prints = split(/\s*,\s*/, $prn);
	my @printids;
	for (my $i=0; $i<@prints; $i++) {
		$printids[$i] = cleanKey($prints[$i]);
		createAtonTemplate($catalognum, $printids[$i], "print");
	}

	### MUSIC       ###

	# get a list of the settings for the catalog number
		# get a list of the voices for the catalog number
	my @settings = getSettingsIds($catalognum);
	# print "SETTINGS: ", join(" ", @settings), "\n";
	for (my $i=0; $i<@settings; $i++) {
		my $catalognum = $settings[$i];
		my $versecat = $catalognum;
		$versecat =~ s/[a-z]+$//;  # for rime
		my $idbase = $settings[$i];  # for part
		my @partlist = getPartList($idbase);
		my $composer = getComposer($catalognum);
		# print "\tPARTS: ", join(" ", @partlist), "\n";
		for (my $j=0; $j<@partlist; $j++) {
			next if $partlist[$j] =~ /bc/i;
			my $jid = "$catalognum-$NAMES{$partlist[$j]}";
			createAtonTemplate($versecat, $jid, "music", $composer);
		}
	}

	#my $ss
	#my $vv = $SETTINGS{$catalognum};
	#my %s = $ss;
	#my $rism = $

}



##############################
##
## getComposer --
##

sub getComposer {
	my ($settingid) = @_;
	my $ss = $SETTINGS{$settingid};
	my %s = %$ss;
	return $s{'COMPOSER'};
}


##############################
##
## getPartList --
##

sub getPartList {
	my ($catalognum) = @_;
	my @output;
	my $shash = $SETTINGS{$catalognum};
	die "Cannot find setting for $catalognum" if $shash =~ /^\s*$/;

	my $rism = $$shash{"PRINCEPSRISM"};
	# die "RISM IS EMPTY FOR $catalognum" if $rism =~ /^\s*$/;
	return @output if $rism =~ /^\s*$/;

	my $rid = cleanKey($rism);
	my $sourcehash = $SOURCES{$rid};



	#if ($rism eq "1605-07") {
	#	return @output;
	#} elsif ($rism eq "M 664") {
	#	return @output;
	#} elsif ($rism eq "1586-21") {
	#	return @output;
	#} elsif ($rism eq "V 1190") {
	#	return @output;
	#} elsif ($rism eq "V 2186") {
	#	return @output;
	#} elsif ($rism eq "S 912") {
	#	return @output;
	#} else {
	die "CANNOT FIND SOURCE FOR $rism" if $sourcehash =~ /^\s*$/;
	#}

	my %s = %$sourcehash;

	my $eparts = $s{"EXTNAMES"};
	# print "EPARTS $eparts\n";
	return @output if $eparts =~ /^\s*$/;

	@output = split(/\s*,\s*/, $eparts);
	return @output;
}



##############################
##
## getSettingsIds --
##

sub getSettingsIds {
	my ($catalognum) = @_;
	my @output;
	my @keys = sort keys %SETTINGS;
	for (my $i=0; $i<@keys; $i++) {
		next if $keys[$i] =~ /^\s*$/;
		if ($keys[$i] =~ /$catalognum/) {
			$output[@output] = $keys[$i];
		}
	}
	return @output;
}



##############################
##
## createAtonTemplate --
##

sub createAtonTemplate {
	my ($catalognum, $id, $type, $composer) = @_;
	
print VFILE <<"EOT";

\@\@BEGIN: VARIORUM
\@CATALOGNUM:	$catalognum
\@ID:		$id
\@TYPE:		$type
EOT

	my $hash;
	
	if ($type eq "manuscript") {
		$hash = $MANUSCRIPTS{$id};
		print VFILE "\@SMSIGLUM:	";
		print VFILE $$hash{"SMSIGLUM"} if $hash;
		print VFILE "\n";
	} elsif ($type eq "print") {
		$hash = $PRINTS{$id};
		print VFILE "\@SPRINT:	";
		print VFILE $$hash{"SPRINT"} if $hash;
		print VFILE "\n";
	} else { # music
		print VFILE "\@COMPOSER:	";
		if ($composer) {
			print VFILE $composer;
		}
		print VFILE "\n";
	}

	print VFILE "\@PAGE:		\n";
	print VFILE "\@PARATEXT:	\n";

	my $vhash = $VERSES{$catalognum};
	my $vcount = $$vhash{"VERSE_COUNT"};
	# print "VERSE COUNT: ", $vcount, "\n";
	$vcount = 1 if !$vcount;
	for (my $i=0; $i<$vcount; $i++) {
		print VFILE "\@VERSE:		\n";
	}

	print VFILE "\@\@END: VARIORUM\n\n";

}



###############################
##
## getManuscripts -- Create a lookup index of all manuscripts.
##
## @@BEGIN: MANUSCRIPT
## @SMSIGLUM: A<sub>1</sub>
## @SIGLUM: R.96 sup.
## @LOCATION: Biblioteca Ambrosiana, Milan, Italy
## @DATING: 16th century
## @DESCRIPTION: miscellaneous codex, containing copies of 6 lyric poems by Tasso
## @@END: MANUSCRIPT
## 

sub getManuscripts {
	my ($manuscriptfile) = @_;
	return getAtonEntries($manuscriptfile, "MANUSCRIPT", "SMSIGLUM");
}



###############################
##
## getPrints -- Create a lookup index of all prints.
##
## @@BEGIN:	PRINT
## @SPRINTNUM:	3
## @PRINTTITLE:	De le rime di diversi nobili poeti toscani, raccolte da M. Dionigi Atanagi. Libro Primo
## @PUBLISHER:	Lodovico Avanzo
## @PUBLOCATION:	Venice
## @PUBYEAR:	1565
## @@END:		PRINT
## 

sub getPrints {
	my ($printfile) = @_;
print "PRINTFILE: $printfile\n";
	return getAtonEntries($printfile, "PRINT", "SPRINTNUM");
}



###############################
##
## getSettings -- Create a lookup index of all settings.
## 
## @@BEGIN:	SETTING
## @CATALOGNUM:	Trm0288l
## @RIMETITLE:	Amatemi, ben mio
## @SOLERTI:	288
## @COMPOSER:	Aagesen, Truid
## @PRINCEPSTITLE:	Cantiones trium vocum
## @PRINCEPSLOC:	Hamburg
## @NORMLOC:	Hamburg
## @NORMPUB:	von Ohr-Jauch
## @NORMPUBSHORT:	von Ohr-Jauch
## @PRINCEPSPUB:	von Ohr-Jauch
## @PRINCEPSYEAR:	1608
## @PRINCEPSRISM:	S 3549
## @REPRINTS:	
## @OVOICES:	3
## @EXTANTVOICES:	3
## @OCLEFS:	C3,C4,F4
## @OMENSURATION:	C
## @OKEYSIG:	
## @TIMPEDITOR:	Ricciardi, Emiliano
## @NOTE:		
## @@END:		SETTING
## 

sub getSettings {
	my ($settingfile) = @_;
	return getAtonEntries($settingfile, "SETTING", "CATALOGNUM");
}



###############################
##
## getVerses -- Create a lookup index of all verses (rime).
## 
## @@BEGIN:	VERSEDATA
## @SOLERTI:	33
## @CATALOGNUM:	Trm0033
## @TITLE:		Io veggio in cielo scintillar le stelle
## @GENRE:		sonetto
## @MANUSRC:	Brn, C, Ts<sub>2</sub>, V<sub>8</sub>
## @PRINTSRC:	11, 12, 13, 22a), 26, 31, 35, 69, 85, 87, 141, 166, 169
## @@BEGIN:	VERSES
## @ABOUTIT:	Camminando di notte prega le stelle che guidino il suo corso.
## @ABOUTEN:	Wandering at night he begs the starts to guide his course.
## @EDITOR:	Solerti, Angelo
## @EDITION_TITLE: Le Rime di Torquato Tasso
## @EDITION_LOC:	Bologna
## @EDITION_PUB:	Romagnoli-Dallâ€™Acqua
## @EDITION_DATE:  1898-1902
## @EDITION_VOL:	2
## @EDITION_PAGE:  49-50
## @TRANSLATOR:	Emiliano Ricciardi and Amyrose McCue Gill
## @VERSE:
## 	Io veggio in cielo scintillar le stelle
## 	Oltre l'usato e lampeggiar tremanti,
## 	Come ne gli occhi de' cortesi amanti
## 	Noi rimiriam talor vive facelle.
## @VERSE:
## 	Aman forse l&agrave; suso, o pur son elle
## 	Pietose a' nostri affanni, a' nostri pianti?
## 	Mentre scorgon le insidie e i passi erranti
## 	L&agrave; dove altri d'Amor goda e favelle?
## @VERSE:
## 	Cortesi luci, se Leandro in mare
## 	O trav&iuml;ato peregrin foss'io
## 	Non mi sareste di soccorso avare:
## @VERSE:
## 	Cos&igrave; vi faccia il Sol pi&ugrave; belle e chiare,
## 	Siate nel dubbio corso al desir mio
## 	Fide mie duci e scorte amate e care.
## @TVERSE:
## 	I see, in the sky, the stars twinkling 
## 	More than usual, and ablaze, trembling,
## 	As in the eyes of gracious lovers
## 	We see at times reflected lively lights.
## @TVERSE:
## 	Perhaps they are in love up there, or are they even
## 	Sympathetic to our troubles, to our tears?
## 	While they espy the dangers and the errant steps,
## 	There, where others take pleasure in and tell tales of Love?
## @TVERSE:
## 	Gracious lights, if Leander in the sea
## 	Or straying pilgrim were I,
## 	You would not be so stingy with your aid:
## @TVERSE:
## 	Thus may the Sun make you more beautiful and bright;
## 	May you be, upon the uncertain course towards my desire,
## 	My faithful guides and beloved and dear guards.
## @@END:		VERSES
## @NEW_CRIT_ED:   Torquato Tasso, <i>Rime dâ€™amore (secondo il codice
## 		Chigiano L VIII 302)</i>, eds. Franco Gavazzeni and
## 		Vercingetorige Martignone, vol. 4 of <i>Edizione
## 		Nazionale delle opere di Torquato Tasso</i>
##		(Alessandria: Edizioni Dellâ€™Orso, 2004), 25.
## @ATTRIBUTION_ABOUT:	Secure
##		<br>
##		Among other authoritative sources (see Literary
##		Sources), this poem appears in the autograph Chigiano
##		L.VIII.302 (Biblioteca Vaticana, Rome), compiled
##		around 1584&ndash;85.
## @DATING:	
## @DEDICATEE:	Bendidio, Lucrezia 
## @COMMENTARY:    
## @@END:		VERSEDATA
##

sub getVerses {
	my ($versefile) = @_;
	return getAtonEntries($versefile, "VERSEDATA", "CATALOGNUM");
}



###############################
##
## getSources -- Create a lookup index of all sources.
## 
## @@BEGIN: SOURCE
## @RISM:	1588-20
## @AUTHOR:	Acelli, Cesare; Croce, Giovanni; Giovannelli, Ruggiero; Guami, Francesco; Guami, Giuseppe; Stivori, Francesco
## @TITLEPAGE:	FIORI MVSICALI / DI DIVERSI /AVTTORI A TRE VOCI. / <i>LIBRO SECONDO.</i> / <i>Nuouamente composti, & dati in luce.</i> / CON PRIVILEGIO: / <i>In Venetia Appresso Giacomo Vincenzi.</i> / MDLXXXVIII.
## @TITLESHORT:	Fiori musicali, libro secondo
## @PUBLISHER:	Vincenzi
## @YEAR:	1588
## @PUBTYPE:	anthology
## @PUBFORMAT:	part-books
## @PUBLOC:	Venetia
## @PUBNORMLOC:	Venice
## @SRCDEDICATEE:	Francesco Sugana
## @OPARTBOOKS:	CTB
## @EXTPARTBOOKS:	CTB
## @EXTNAMES:	CTB
## @SRCLOCSIGLA:	A-Wn
## @REPRODUCTIONTYPE:	microfilm
## @SRCURL:	
## @@END: SOURCE
## 

sub getSources {
	my ($sourcefile) = @_;
	return getAtonEntries($sourcefile, "SOURCE", "RISM");
}



##############################
##
## cleanKey --
##

sub cleanKey {
	my ($key) = @_;
	$key =~ s/<.*?>//g;
	$key =~ s/\///g;
	$key =~ s/[^a-zA-Z0-9]//g;
	$key = "S$key" if $key =~ /^\d/;
	return $key;
}



##############################
##
## getAtonEntries --
##

sub getAtonEntries {
	my ($datafile, $ATONTAG, $IDTAG) = @_;
print "\n=============================================\n";
	my %output;
	open (DFILE, $datafile) or die "Cannot read manuscripts from $datafile\n";
	my @contents = <DFILE>;
	close DFILE;
	my $index = 0;
	my $key;
	my $hentry;
	my %entry;
	while (($index >= 0) && ($index < @contents)) {
		($index, $hentry) = getAtonEntry($ATONTAG, $index, @contents);
print "INDEX $index, HENTRY, $hentry\n";
		if ($index > 0) {
			# %entry = %$hentry;
			$key = cleanKey($$hentry{$IDTAG});
print "\tKEY = $key\n";
print "\tATONTAG = $ATONTAG\n";
print "\tIDTAG = $IDTAG\n";
			if ($key !~ /^\s*$/) {
				# ignore entries with no ID (possible in sources.aton)
				if ($output{$key} ne "") {
					print "CURRENT VALUE: $output{$key}\n";
					die "Duplicate key >>$key<< in list";
				}
				$output{$key} = $hentry;
			}
		}
	}
	return %output;
}



##############################
##
## getAtonEntry --
##

sub getAtonEntry {
	my ($KEY, $index, @contents) = @_;
	my $start = -1;
	for (my $i=$index; $i<@contents; $i++) {
		if ($contents[$i] =~ /\@\@BEGIN\s*:\s*$KEY\s*$/) {
			$start = $i+1;
			last;
		}
	}
	if ($start < 0) {
		# return -1 if there is no more data.
		return (-1, "", 0);
	}
	my %entry;
	my $key;
	my $returnid;
	my $outindex = -1;
	my $value;
	for (my $i=$start; $i<@contents; $i++) {
		my $line = $contents[$i];
		chomp $line;
		if ($line =~ /^\@\@END\s*:\s*$KEY\s*$/) {
			$outindex = $i;
			last;
		} elsif ($line =~ /^\@([^:\@]+)\s*:\s*(.*)\s*$/) {
			$key = $1;
			$value = $2;
			if ($key eq "VERSE") {
				$entry{"VERSE_COUNT"}++;
				$entry{$key} .= "\n$value";
				$entry{$key} =~ s/^\s*//;
				$entry{$key} =~ s/\s*$//;
			} else {
				$entry{$key} .= " $value";
				$entry{$key} =~ s/^\s*//;
				$entry{$key} =~ s/\s*$//;
			}
		} elsif ($line !~ /^\@/) {
			if ($key eq "VERSE") {
				$entry{$key} .= "\n$value";
				$entry{$key} =~ s/^\s*//;
				$entry{$key} =~ s/\s*$//;
			} elsif ($key ne "") {
				$value = "$entry{$key} $line";
				$value =~ s/\s*$//;
				$value =~ s/^\s*//;
				$entry{$key} = $value;
			}
		}
	}
	return ($outindex, \%entry);
}

