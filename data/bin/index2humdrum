#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Tue Jul 10 22:24:30 CEST 2018
# Last Modified: Tue Jul 10 22:24:36 CEST 2018
# Filename:      index2humdrum
# Syntax:        perl 5
# vim:           ts=3 ft=perl
#
# Description:   Add or replace reference records in Humdrum file from ATON index file
#                for musical settings.
#

use strict;
use Getopt::Long;

my $indexfile;
Getopt::Long::Configure("bundling");
GetOptions (
   'f|i|index=s' => \$indexfile
);
die if $indexfile =~ /^\s*$/;

my @indexcontents;
open (IFILE, $indexfile) or die "Cannot read index file $indexfile\n";
@indexcontents = <IFILE>;
close IFILE;


my @contents;

if (@ARGV == 0) {
	die "Usage: $0 -f index.aton file.krn [file2.krn...]";
} else {
	foreach my $file (@ARGV) {
		open(FILE, $file) or die "Cannot read $file\n";
		@contents = <>;
		my @newcontents = processFile($file, @contents);
		open(FILE, ">$file") or die "Cannot write $file\n";
		print FILE @newcontents;
		close FILE;
	}
}

# Example entry:
#
# @@BEGIN:	RIME_SETTING
# @CATALOGNUM:	Trm0346a
# @RIMETITLE:	Cantava in riva al fiume
# @SOLERTI:	346
# @COMPOSER:	Agostini, Lodovico
# @COMDATES:	
# @PRINCEPSTITLE:	Il nuovo echo
# @PRINCEPSLOC:	Ferrara
# @NORMLOC:	Ferrara
# @NORMPUB:	Baldini
# @NORMPUBSHORT:	Baldini
# @PRINCEPSPUB:	Baldini
# @PRINCEPSYEAR:	1583
# @PRINCEPSRISM:	A0409
# @REPRINTS:	
# @OCLEFS:	
# @OMENSURATION:	
# @OKEYSIG:	
# @NOTE:		
# @@END:		RIME_SETTING
#
# Mapping to reference records in this order at the top of a file:
#
# !!!COM: @COMPOSER
# !!!CDT: composer's date
# !!!PTL: @PRINCEPSTITLE
# !!!PPP: @NORMLOC
# !!!PPR: @NORMPUBSHORT
# !!!PDT: @PRINCEPSYEAR
# !!!RISM: @PRINCEPSRISM
# !!!rime: @SOLERTI
# !!!OTL: original title (do not change since it can be different from poem's title @RIMETITLE
# !!!AGN: Madrigal for Trm9999z type catalog numbers
# !!!SCT: @CATALOGNUM
# !!!SCA: @CATALOGNUM
# !!!voices:
#
# AFTER data:
#

sub processFile {
	my ($file, @contents) = @_;
	if ($file !~ /^([A-Z][a-z][a-z]\d+[a-z])-/) {
		die "FILENAME IS INVALID: $file\n";
	}
	my $id = $1;
	my %entry = getIndexEntry($id);

	my %keymap;
	$keymap{"COM"} = "COMPOSER";
	$keymap{"PTL"} = "PRINCEPSTITLE";
	$keymap{"PPP"} = "NORMLOC";
	$keymap{"PPR"} = "NORMPUBSHORT";
	$keymap{"PDT"} = "PRINCEPSYEAR";
	$keymap{"RISM"} = "PRINCEPSRISM";
	$keymap{"rime"} = "SOLERTI";
	$keymap{"SCT"} = "CATALOGNUM";
	$keymap{"SCA"} = "CATALOGNUM";

	for (my $i=0; $i<@contents; $i++) {
		if ($contents[$i] !~ /^!!!([^\s:]+)\s*:\s(.*)\s*/) {
			next;
		}
		my $key = $1;
		my $value = $2;
		my $newkey = $keymap{$key};
		next if $newkey =~ /^\s*$/;
		my $newval = $entry{$newkey};
		next if $newval =~ /^\s*$/;
		$contents[$i] = "!!!$key: $newval\n";
	}
	return @contents;
}



##############################
##
## getIndexEntry --
##

sub getIndexEntry {
	my ($id) = @_;
	my $startindex = 0;
	my $found = 0;
	for (my $i = 0; $i < @indexcontents; $i++) {
		if ($indexcontents[$i] =~ /^\@\@BEGIN\s*:\s*.*SETTING/) {
			$startindex = $i;
		}
		if ($indexcontents[$i] =~ /\@CATALOGNUM\s*:\s*$id/) {
			$found = 1;
			last;
		}
	}

	if (!$found) {
		die "Cannot find entry for $id\n";
	}


	my %output;
	my $last1;
	for (my $i = $startindex + 1; $i < @indexcontents; $i++) {
		my $line = $indexcontents[$i];
		if ($line =~ /^\@\@END\s*:\s*.*SETTING/) {
			last;
		}
		next if $line =~ /^\s*$/;
		if ($line =~ /^\@([^\s:]+)\s*:\s*(.*)\s*$/) {
			$output{$1} = $2;
			$last1 = $1;
		} elsif ($line !~ /^\@/) {
			chomp $line;
			$output{$last1} .= " $line";
		}
	}
	return %output;
}



